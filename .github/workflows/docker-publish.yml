name: Build and Publish Docker Images

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}
  IMAGE_NAME_DASHBOARD: ${{ github.repository }}-dashboard

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build-and-push-api:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Convert repository name to lowercase
        id: lowercase
        run: |
          echo "image_name_api=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "image_name_dashboard=$(echo ${{ github.repository }}-dashboard | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name_api }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner on API image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name_api }}:latest
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Run Trivy scanner in table format for logs
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name_api }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-api-results.sarif'
          category: 'docker-api'
        continue-on-error: true

  build-and-push-dashboard:
    name: Build and Push Dashboard Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Convert repository name to lowercase
        id: lowercase
        run: |
          echo "image_name_dashboard=$(echo ${{ github.repository }}-dashboard | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Dashboard
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name_dashboard }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dashboard
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner on Dashboard image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name_dashboard }}:latest
          format: 'sarif'
          output: 'trivy-dashboard-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Run Trivy scanner in table format for logs
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name_dashboard }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-dashboard-results.sarif'
          category: 'docker-dashboard'
        continue-on-error: true

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-push-api, build-and-push-dashboard]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "API Build: ${{ needs.build-and-push-api.result }}"
          echo "Dashboard Build: ${{ needs.build-and-push-dashboard.result }}"
          
          if [[ "${{ needs.build-and-push-api.result }}" == "success" ]] && [[ "${{ needs.build-and-push-dashboard.result }}" == "success" ]]; then
            echo "✅ All images built successfully!"
          else
            echo "❌ One or more builds failed"
            exit 1
          fi
